version: '3'
services:
  rabbitmq:
    image: rabbitmq:3.10.7-management
    hostname: rabbitmq
    restart: always
    environment:
      - RABBITMQ_DEFAULT_USER=md5crack
      - RABBITMQ_DEFAULT_PASS=goga123
    ports:
      - "15672:15672"
      - "5672:5672"
    healthcheck:
      test: [ "CMD", "rabbitmqctl", "status" ]
      interval: 20s
      timeout: 5s
      retries: 5
    networks:
      - md5crack-network

  md5-mongo-primary:
    container_name: md5-mongo-primary
    image: mongo:5
    command: --replSet rs0
    ports:
      - "27017:27017"
    volumes:
      - md5crack-data:/data/db
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 10s
      retries: 5
    networks:
      - md5crack-network

  md5-mongo-secondary1:
    container_name: md5-mongo-secondary1
    image: mongo:5
    command: --replSet rs0
    ports:
      - "27018:27017"
    volumes:
      - md5crack-data-secondary1:/data/db
    networks:
      - md5crack-network

  md5-mongo-secondary2:
    container_name: md5-mongo-secondary2
    image: mongo:5
    command: --replSet rs0
    ports:
      - "27019:27017"
    volumes:
      - md5crack-data-secondary2:/data/db
    networks:
      - md5crack-network

  md5-mongo-setup:
    image: mongo:5
    restart: "no"
    depends_on:
      - md5-mongo-primary
      - md5-mongo-secondary1
      - md5-mongo-secondary2
    entrypoint: >
      bash -c "
        sleep 5 && \
        mongo --host md5-mongo-primary:27017 --eval '
          rs.initiate({
            _id: \"rs0\",
            members: [
              {_id: 0, host: \"md5-mongo-primary:27017\", priority: 1},
              {_id: 1, host: \"md5-mongo-secondary1:27017\", priority: 5},
              {_id: 2, host: \"md5-mongo-secondary2:27017\", priority: 3}
            ]
          }) || rs.status()
        '
      "
    networks:
      - md5crack-network

  md5-mongo-elect:
    image: mongo:5
    depends_on:
      - md5-mongo-primary
      - md5-mongo-secondary1
      - md5-mongo-secondary2
    entrypoint: >
      bash -c "
        sleep 20 && \
        mongo --host md5-mongo-primary:27017 --eval 'rs.stepDown()'
      "
    networks:
      - md5crack-network

  manager:
    container_name: manager
    ports:
      - "8080:8080"
    image: md5crack-manager
    build:
      context: .
      dockerfile: manager/Dockerfile
    networks:
      - md5crack-network
    environment:
      - DB_URI=mongodb://md5-mongo-primary:27017,md5-mongo-secondary1:27017,md5-mongo-secondary2:27017/md5-mongo?replicaSet=rs0&w=majority
      - RABBIT_URI=amqp://md5crack:goga123@rabbitmq:5672
      - WORKERS_COUNT=2
    depends_on:
      - rabbitmq
      - md5-mongo-primary
      - md5-mongo-secondary1
      - md5-mongo-secondary2

  worker-0:
    container_name: worker-0
    image: md5crack-worker
    build:
      context: .
      dockerfile: worker/Dockerfile
    networks:
      - md5crack-network
    environment:
      - WORKER_ID=0
      - RABBIT_URI=amqp://md5crack:goga123@rabbitmq:5672
    depends_on:
      - rabbitmq
      - md5-mongo-primary
      - md5-mongo-secondary1
      - md5-mongo-secondary2

  worker-1:
    container_name: worker-1
    image: md5crack-worker
    build:
      context: .
      dockerfile: worker/Dockerfile
    networks:
      - md5crack-network
    environment:
      - WORKER_ID=1
      - RABBIT_URI=amqp://md5crack:goga123@rabbitmq:5672
    depends_on:
      - rabbitmq
      - md5-mongo-primary
      - md5-mongo-secondary1
      - md5-mongo-secondary2

volumes:
  md5crack-data:
  md5crack-data-secondary1:
  md5crack-data-secondary2:

networks:
  md5crack-network:
    driver: bridge
